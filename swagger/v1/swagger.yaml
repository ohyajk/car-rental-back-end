---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/cars":
    get:
      summary: Fetches all cars
      tags:
      - Cars
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: string
                    rent_per_day:
                      type: number
                    user_id:
                      type: integer
                  required:
                  - id
                  - name
                  - description
                  - rent_per_day
                  - user_id
    post:
      summary: Creates a car
      tags:
      - Cars
      parameters: []
      responses:
        '201':
          description: car created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                rent_per_day:
                  type: number
                user_id:
                  type: integer
              required:
              - name
              - user_id
  "/cars/{id}":
    get:
      summary: Retrieves a car
      tags:
      - Cars
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  rent_per_day:
                    type: number
                  user_id:
                    type: integer
                required:
                - id
                - name
                - description
                - rent_per_day
                - user_id
    delete:
      summary: Deletes a car
      tags:
      - Cars
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: car deleted successfully
  "/reservations":
    get:
      summary: Fetches all reservations
      tags:
      - Reservations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      reservations:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            start_date:
                              type: string
                            end_date:
                              type: string
                            car_id:
                              type: integer
                            user_id:
                              type: integer
                          required:
                          - id
                          - start_date
                          - end_date
                          - car_id
                          - user_id
    post:
      summary: Creates a reservation
      tags:
      - Reservations
      parameters: []
      responses:
        '201':
          description: reservation created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                end_date:
                  type: string
                car_id:
                  type: integer
                user_id:
                  type: integer
              required:
              - start_date
              - end_date
              - car_id
              - user_id
  "/api/v1/reservations/{id}":
    delete:
      summary: Delete specific reservation by {id}
      tags:
      - Reservations
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: reservation deleted successfully
        '401':
          description: unauthorized
        '202':
          description: Reservation deleted successfully
        '404':
          description: Reservation not found
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
  "/users":
    get:
      summary: Fetches all users
      tags:
      - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    email:
                      type: string
                    role:
                      type: string
                  required:
                  - id
                  - name
                  - email
                  - role
    post:
      summary: Creates a user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: user created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
              required:
              - name
              - email
              - password
              - role
  "/users/{id}":
    get:
      summary: Retrieves a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                required:
                - id
                - name
                - email
                - role
    delete:
      summary: Deletes a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user deleted successfully
  "/api/v1/cars":
    get:
      summary: List of cars
      tags:
      - Cars
      parameters:
      - name: filter
        in: query
        description: Filter cars
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: successful
    post:
      summary: Create A Car
      tags:
      - Cars
      parameters: []
      responses:
        '201':
          description: Created Car successfully
        '400':
          description: Operation not successful because of missing arguments or broken
            data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: McLaren
                description:
                  type: text
                  default: This is the description of McLaren
                price:
                  type: number
                  default: '25000'
                rent_per_day:
                  type: number
                  default: '200'
                model:
                  type: string
                  default: Sport
                images:
                  type: array
                  default:
                  - https://images.unsplash.com/photo-1605559424843-9e4c228bf1c2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTB8fGNhcnN8ZW58MHx8MHx8&w=1000&q=80
                  - https://mclaren.scene7.com/is/image/mclaren/DSC00052_6:crop-1x1?wid=1200&hei=1200
              required:
              - name
              - description
              - price
              - type
              - year
  "/api/v1/cars/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show Specific Car using {id}
      tags:
      - Cars
      responses:
        '200':
          description: successful
        '400':
          description: Car not found
    delete:
      summary: Delete a car by {id}
      tags:
      - Cars
      responses:
        '202':
          description: Deleted Car successfully
        '404':
          description: Car not found
  "/api/v1/reservations":
    get:
      summary: List all reservations for the current user
      tags:
      - Reservations
      responses:
        '200':
          description: successful
    post:
      summary: Add a new reservation
      tags:
      - Reservations
      parameters: []
      responses:
        '201':
          description: Reservation created successfully
        '400':
          description: Reservation not added due to the broken data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                city:
                  type: string
                  default: Frankfut
                starting_date:
                  type: string
                  default: 07-04-2023
                ending_date:
                  type: string
                  default: 12-04-2023
                car_id:
                  type: number
                  default: '1'
              required:
              - city
              - starting_date
              - ending_date
              - car_id
servers:
- url: http://localhost:3000
  variables:
    defaultHost:
      default: www.example.com
