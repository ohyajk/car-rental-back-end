---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/cars":
    get:
      summary: Fetches all cars
      tags:
      - Cars
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: string
                    rent_per_day:
                      type: number
                    user_id:
                      type: integer
                  required:
                  - id
                  - name
                  - description
                  - rent_per_day
                  - user_id
    post:
      summary: Creates a car
      tags:
      - Cars
      parameters: []
      responses:
        '201':
          description: car created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                rent_per_day:
                  type: number
                user_id:
                  type: integer
              required:
              - name
              - user_id
  "/cars/{id}":
    get:
      summary: Retrieves a car
      tags:
      - Cars
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  rent_per_day:
                    type: number
                  user_id:
                    type: integer
                required:
                - id
                - name
                - description
                - rent_per_day
                - user_id
    delete:
      summary: Deletes a car
      tags:
      - Cars
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: car deleted successfully
  "/reservations":
    get:
      summary: Fetches all reservations
      tags:
      - Reservations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      reservations:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            start_date:
                              type: string
                            end_date:
                              type: string
                            car_id:
                              type: integer
                            user_id:
                              type: integer
                          required:
                          - id
                          - start_date
                          - end_date
                          - car_id
                          - user_id
    post:
      summary: Creates a reservation
      tags:
      - Reservations
      parameters: []
      responses:
        '201':
          description: reservation created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                end_date:
                  type: string
                car_id:
                  type: integer
                user_id:
                  type: integer
              required:
              - start_date
              - end_date
              - car_id
              - user_id
  "/api/v1/reservations/{id}":
    delete:
      summary: Deletes a reservation
      tags:
      - Reservations
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: reservation deleted successfully
        '401':
          description: unauthorized
  "/users":
    get:
      summary: Fetches all users
      tags:
      - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    email:
                      type: string
                    role:
                      type: string
                  required:
                  - id
                  - name
                  - email
                  - role
    post:
      summary: Creates a user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: user created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
              required:
              - name
              - email
              - password
              - role
  "/users/{id}":
    get:
      summary: Retrieves a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                required:
                - id
                - name
                - email
                - role
    delete:
      summary: Deletes a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user deleted successfully
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
